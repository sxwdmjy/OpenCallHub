server:
  port: 4320
  forward-headers-strategy: framework
  # 添加压缩配置
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024

spring:
  application:
    name: och-api
  # 添加配置元数据支持
  config:
    import: optional:classpath:config/application-{profile}.yml
  
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/openCallHub?useSSL=false&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&useSSL=false&allowPublicKeyRetrieval=true&rewriteBatchedStatements=true&useServerPrepStmts=true&cachePrepStmts=true
    username: root
    password: 123456
    druid:
      # 连接池配置
      initialSize: 5
      minIdle: 10
      maxActive: 50
      maxWait: 60000
      # 连接池空闲连接检测
      timeBetweenEvictionRunsMillis: 60000
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 连接池配置
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 监控配置
      filter:
        stat:
          enabled: true
          log-slow-sql: true
          slow-sql-millis: 1000
        wall:
          config:
            multi-statement-allow: true
        slf4j:
          enabled: true
          statement-log-enabled: false
          result-set-log-enabled: false
          connection-log-enabled: false
          transaction-log-enabled: false
      # 连接池监控
      webStatFilter:
        enabled: true
        url-pattern: /*
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
      statViewServlet:
        enabled: true
        url-pattern: /druid/*
        reset-enable: false
        login-username: admin
        login-password: admin123

  data:
    redis:
      host: 127.0.0.1
      port: 6379
      password: 
      timeout: 10s
      database: 0
      # 连接池配置
      jedis:
        pool:
          min-idle: 5
          max-idle: 20
          max-active: 50
          max-wait: 3000ms
          time-between-eviction-runs: 60s
      # 集群配置（如果需要）
      # cluster:
      #   nodes: 127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003
      # 哨兵配置（如果需要）
      # sentinel:
      #   master: mymaster
      #   nodes: 127.0.0.1:26379,127.0.0.1:26380,127.0.0.1:26381
      client-type: jedis
  # 缓存配置
  cache:
    type: redis
    redis:
      time-to-live: 30m
      cache-null-values: false
      use-key-prefix: true
      key-prefix: "och:"
  # 其他配置保持不变
  #  rabbitmq:
  #    host: 127.0.0.1
  #    port: 5672
  #    username: guest
  #    password: guest
  #    virtual-host: /
  #    publisher-confirm-type: SIMPLE
  #    publisher-returns: true
  #    listener:
  #      simple:
  #        acknowledge-mode: manual
  #        default-requeue-rejected: true
  #        retry:
  #          enabled: true
  #          max-attempts: 3
  #      direct:
  #        acknowledge-mode: manual
  #        retry:
  #          enabled: true
  ai:
    dashscope:
      api-key: 23
    chat:
      model: qwq-plus

    deepseek:
      api-key: 123
      base-url: "https://api.deepseek.com"
      chat:
        options:
          model: deepseek-chat
      embedding:
        enabled: false
  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: always
    properties:
      org:
        quartz:
          scheduler:
            instanceName: och-clusteredScheduler
            instanceId: AUTO
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 10
            threadPriority: 5
            threadNamePrefix: Quartz-
          jobStore:
            class: org.springframework.scheduling.quartz.LocalDataSourceJobStore
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            tablePrefix: QRTZ_
            isClustered: true
            useProperties: false
            clusterCheckinInterval: 1000

# FreeSWITCH配置
freeswitch:
  thread-num: 64
  queue-capacity: 10000

# 线程池配置
thread-pool:
  core-pool-size: 10
  max-pool-size: 50
  queue-capacity: 1000
  keep-alive-seconds: 60
  thread-name-prefix: "och-"

# 日志配置
logging:
  level:
    com.och: debug
  config: classpath:logback-spring.xml



swagger:
  title: 呼叫中心系统
  description: 呼叫中心系统文档
  version: v0.0.1


springdoc:
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
  api-docs:
    path: /v3/api-docs
    enabled: true


fs:
  xml-curl:
    auth-scheme: basic # basic、digest
    secretKey: b4c91178-c00e-7e42-6a9b-2c470eb0fb30 # 密钥

system:
  setting:
    localHost: 127.0.0.1
    fsProfile: /record  # freeswitch文件地址
    fsFileSuffix: .wav # freeswitch文件后缀
    baseProfile: /temp # 文件上传地址
    uploadType: local # 默认上传类型 loca-本地上传、tx-腾讯云cos、ali-阿里云
    ttsType: ali # 默认语音合成类型 ali-阿里云、tx-腾讯云、xf-讯飞
    ali-config: # 阿里云cos配置
      cos:
        host: 231
        bucketName: 12312
      tts:
        appKey:
        accessKeyId:
        accessKeySecret:
        url:
        voice: zhixiaomei
    tx-config: # 腾讯云cos配置
      cos:
        host: 12321
        bucketName: 21321
        regionName: 213
        accessKey: 2312
        secretKey: 123
      tts:
        appKey: 123

# 文件服务端口配置
file-server:
  port: 9527
  bossThreads: 1
  workerThreads: 4
  heartbeat:
    maxLostAttempts: 3
    checkInterval: 5000


# 滑块验证码配置
captcha:
  # 如果项目中使用到了redis，滑块验证码会自动把验证码数据存到redis中， 这里配置redis的key的前缀,默认是captcha:slider
  prefix: captcha
  # 验证码过期时间，默认是2分钟,单位毫秒， 可以根据自身业务进行调整
  expire:
    # 默认缓存时间 2分钟
    default: 10000
    # 针对 点选验证码 过期时间设置为 2分钟， 因为点选验证码验证比较慢，把过期时间调整大一些
    WORD_IMAGE_CLICK: 20000
  # 使用加载系统自带的资源， 默认是 false
  init-default-resource: false
  # 缓存控制， 默认为false不开启
  local-cache-enabled: true
  # 验证码会提前缓存一些生成好的验证数据， 默认是20
  local-cache-size: 20
  # 缓存拉取失败后等待时间 默认是 5秒钟
  local-cache-wait-time: 5000
  # 缓存检查间隔 默认是2秒钟
  local-cache-period: 2000
  secondary:
    # 二次验证， 默认false 不开启
    enabled: false
    # 二次验证过期时间， 默认 2分钟
    expire: 120000
    # 二次验证缓存key前缀，默认是 captcha:secondary
    keyPrefix: "captcha:secondary"